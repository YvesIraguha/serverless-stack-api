# NOTE: update this with your service name
service: notes-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  environment:
    tableName: notes
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
resources:
  - ${file(resources/api-gateway-errors.yml)}
  CognitoNotesUserPool:
    Type: AWS::Cognito::UserPool
      Properties: 
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: false
        AliasAttributes: 
          - String
        AutoVerifiedAttributes: 
          - email
        Schema:
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "email"
            Required: true
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "preferred_username"
            Required: false
        UsernameAttributes: 
          - 'email'
        UsernameConfiguration: 
          CaseSensitive: false
        UserPoolName: NoteUserPool
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: notes-user-pool-client
      UserPoolId:
        Ref: CognitoNotesUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  CognitoNotesIdentityPool:
    Type: AWS::Cognito::IdentityPool
      Properties: 
        AllowClassicFlow: true
        AllowUnauthenticatedIdentities: false
        CognitoEvents: Json
        CognitoIdentityProviders: 
          - ClientId: !Ref CognitoNotesUserPool
            ProviderName: !GetAtt CognitoNotesUserPool.ProviderName
            ServerSideTokenCheck: true
        IdentityPoolName: NotesIdentityPool
  CognitoNotesIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoNotesIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoNotesAuthRole, Arn]
    # IAM role used for authenticated users
  CognitoNotesAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoNotesIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              
              # Allow users to invoke our API
              - Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke'
                Resource:
                  Fn::Join:
                    - ''
                    -
                      - 'arn:aws:execute-api:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':'
                      - Ref: ApiGatewayRestApi
                      - '/*'
              
              # Allow users to upload attachments to their
              # folder inside our S3 bucket
              # - Effect: 'Allow'
              #   Action:
              #     - 's3:*'
              #   Resource:
              #     - Fn::Join:
              #       - ''
              #       -
              #         - Fn::GetAtt: [AttachmentsBucket, Arn]
              #         - '/private/'
              #         - '$'
              #         - '{cognito-identity.amazonaws.com:sub}/*'
Outputs:
  userPoolId:
    Value: !Ref CognitoNotesUserPool
  userPoolProviderName:
    Value: !GetAtt CognitoNotesUserPool.ProviderName
  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
  userPoolArn:
    Value: !GetAtt CognitoNotesUserPool.Arn
  identityPoolId:
    Value: !Ref CognitoNotesIdentityPool
